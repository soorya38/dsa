1217. Minimum Cost to Move Chips to The Same Position

We have n chips, where the position of the ith chip is position[i].

We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:

position[i] + 2 or position[i] - 2 with cost = 0.
position[i] + 1 or position[i] - 1 with cost = 1.
Return the minimum cost needed to move all the chips to the same position.

Input: position = [1,2,3]
Output: 1
Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.
Second step: Move the chip at position 2 to position 1 with cost = 1.
Total cost is 1.

Input: position = [2,2,2,3,3]
Output: 2
Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.

Input: position = [1,1000000000]
Output: 1

class Solution {
public:
    int minCostToMoveChips(vector<int>& nums) {
        int cost = INT_MAX;
        set<int> s;
        for(int i=0; i<nums.size(); i++)
            s.insert(nums[i]);
        
        for(auto i:s)
        {
            int sum = 0;
            for(int j=0; j<nums.size(); j++)
            {
                int diff = abs(i - nums[j]);
                sum += (diff % 2);
            }
            cost = min(cost, sum);
        }

        return cost;
    }
};
