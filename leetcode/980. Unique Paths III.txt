980. Unique Paths III
Solved
Hard
Topics
Companies
You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
Example 3:


Input: grid = [[0,1],[2,0]]
Output: 0
Explanation: There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
1 <= m * n <= 20
-1 <= grid[i][j] <= 2

solution :

class Solution {
public:
    int c = 0, sum=2;
    int endx, endy;
    void func(vector<vector<int>>& nums, int x, int y, vector<vector<int>>& sol, int count) {
        if (x < 0 || y < 0 || x >= nums.size() || y >= nums[0].size() || nums[x][y] == -1 || sol[x][y] == 1) {
            return;
        }
        
        if (x == endx && y == endy) {
            count++;
            if(count == sum)
                c++;
            count--;
            return;
        }

        if(nums[x][y] != -1) {
            sol[x][y] = 1; 
            count++;
            func(nums, x + 1, y, sol, count); 
            func(nums, x, y + 1, sol, count); 
            func(nums, x-1, y , sol, count); 
            func(nums, x, y - 1, sol, count); 
            sol[x][y] = 0; 
            count--;
        }
    }

    int uniquePathsIII(vector<vector<int>>& nums) {
        vector<vector<int>> sol(nums.size(), vector<int>(nums[0].size(), 0));
        int sx, sy;
        for(int i=0; i<nums.size(); i++) {
            for(int j=0; j<nums[0].size(); j++)
                if(nums[i][j] == 1) {
                    sx = i;
                    sy = j;
                } else if(nums[i][j] == 2) {
                    endx = i;
                    endy = j;
                } else if(nums[i][j] != -1) {
                    sum++;
                }
        }
        func(nums, sx, sy, sol, 0);
        return c;
    }
};
