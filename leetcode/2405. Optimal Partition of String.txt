2405. Optimal Partition of String

Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.

Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.

Input: s = "ssssss"
Output: 6
Explanation:
The only valid partition is ("s","s","s","s","s","s").

class Solution {
public:
    int partitionString(string s) {
        int count = 1, n = s.size();
        set<char> v;
        for(int i=0; i<n; i++) {
            if(v.find(s[i]) != v.end()) {
                v.clear();
                count++;
                i--;
            }
            else 
                v.insert(s[i]);
        }
        return count;
    }
};