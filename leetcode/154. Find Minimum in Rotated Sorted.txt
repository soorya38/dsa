154. Find Minimum in Rotated Sorted Array II

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

You must decrease the overall operation steps as much as possible.

Input: nums = [1,3,5]
Output: 1

Input: nums = [2,2,2,0,1]
Output: 0

class Solution {
public:
    int findMin(vector<int>& nums) {
        int i = 0, j = nums.size()-1;
        while(i < j) {
            int mid = i + (j-i) / 2;
            if(nums[mid] > nums[j])
                i = mid + 1;
            else if(nums[mid] < nums[j])
                j = mid;
            else
                j--;
        }
        return nums[i];
    }
};