216. Combination Sum III
Solved
Medium
Topics
Companies
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:

Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.
 

Constraints:

2 <= k <= 9
1 <= n <= 60

solution :

class Solution {
public:
    int v;
    void func(vector<int> nums, int sum, int target, int c, vector<int> &temp, vector<vector<int>> &ans) {
        if(sum > target)
            return ;
        if(sum == target) {
            if(temp.size() == v)
                ans.push_back(temp);
            return ;
        }
        if(c >= nums.size())
            return ;

        temp.push_back(nums[c]);
        func(nums, sum+nums[c], target, c+1, temp, ans);
        temp.pop_back();
        func(nums, sum, target, c+1, temp, ans);
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        vector<vector<int>> ans;
        vector<int> temp;
        v = k;
        func(nums, 0, n, 0, temp, ans);
        return ans;
    }
};