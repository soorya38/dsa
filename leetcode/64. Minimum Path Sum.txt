Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12

solution:
class Solution {
    public:
    int solve(vector<vector<int>>& grid,int m,int n){
        vector<vector<int>>v(m,vector<int>(n,0));
        v[0][0] = grid[0][0];
      for(int i=1;i<n;i++){
          v[0][i]=grid[0][i]+v[0][i-1];
      }
      for(int j=1;j<m;j++){
          v[j][0]=grid[j][0]+v[j-1][0];
      }
      for(int i=1;i<m;i++){
          for(int j=1;j<n;j++){
              v[i][j]=grid[i][j]+min(v[i][j-1],v[i-1][j]);
          }
      }
   return v[m-1][n-1];
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int sum=solve(grid,m,n);
        return sum;
    }
};