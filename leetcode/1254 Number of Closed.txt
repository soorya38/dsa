1254. Number of Closed Islands
Solved
Medium
Topics
Companies
Hint

Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

 

Example 1:

Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).

Example 2:

Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1

Example 3:

Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2

 

Constraints:

    1 <= grid.length, grid[0].length <= 100
    0 <= grid[i][j] <=1

solution :

class Solution {
public:
    void bfs(vector<vector<int>> &nums, int ir, int jc) {
        vector<int> s = {-1, 0, 1, 0};
        vector<int> s1 = {0, 1, 0, -1};
        stack<pair<int, int>> q;
        q.push({ir, jc});
        while(q.size() > 0) {
            int row = q.top().first;
            int col = q.top().second;
            q.pop();
            nums[row][col] = 1;
            for(int i=0; i<4; i++) {
                int r = row + s[i];
                int c = col + s1[i];
                if(r>=0 && c>=0 && r<nums.size() && c<nums[0].size() && nums[r][c] == 0)
                    q.push({r, c});
            }
        }
    }

    int closedIsland(vector<vector<int>>& nums) {
        for(int i=0; i<nums.size(); i++) {
            for(int j=0; j<nums[0].size(); j++)
                if(i == 0 || j == 0 || i == nums.size()-1 || j == nums[0].size()-1)
                if(nums[i][j] == 0)
                    bfs(nums, i, j);
        }
        int count = 0;
        for(int i=1; i<nums.size()-1; i++) {
            for(int j=1; j<nums[0].size()-1; j++)
                if(nums[i][j] == 0) {
                    bfs(nums, i, j);
                    count++;
                }
        }
        return count;
    }
};
