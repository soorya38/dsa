797. All Paths From Source to Target
Solved
Medium
Topics
Companies
Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
 

Constraints:

n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i (i.e., there will be no self-loops).
All the elements of graph[i] are unique.
The input graph is guaranteed to be a DAG.

solution :

class Solution {
public:
    vector<vector<int>> mat;

    void dfs(unordered_map<int, vector<int>> g, int src, int target, set<int> &visited, vector<int> &path) {
        visited.insert(src);
        path.push_back(src);

        if(src == target) {
            mat.push_back(path);
        } else {
            for(int i: g[src])
                if(visited.find(i) == visited.end())
                    dfs(g, i, target, visited, path);
        }

        visited.erase(src);
        path.pop_back();
    }

    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& nums) {
        unordered_map<int, vector<int>> g;
        for(int i=0; i<nums.size(); i++) {
            for(int j=0; j<nums[i].size(); j++)
                g[i].push_back(nums[i][j]);
        }
        set<int> visited;
        vector<int> path;
        dfs(g, 0, nums.size()-1, visited, path);
        return mat;
    }
};