113. Path Sum II

Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

 

Example 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

Example 2:

Input: root = [1,2,3], targetSum = 5
Output: []

Example 3:

Input: root = [1,2], targetSum = 0
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 5000].
    -1000 <= Node.val <= 1000
    -1000 <= targetSum <= 1000

solution :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> nums;
vector<vector<int>> ans;

void dfs(TreeNode* root) {
    if (!root) return;

    stack<pair<TreeNode*, vector<int>>> s;
    s.push({root, {root->val}});
    
    while (!s.empty()) {
        auto [node, path] = s.top();
        s.pop();

        if (!node->left && !node->right) {
            ans.push_back(path);
        }
        if (node->right) {
            vector<int> newPath = path;
            newPath.push_back(node->right->val);
            s.push({node->right, newPath});
        }
        
        if (node->left) {
            path.push_back(node->left->val);
            s.push({node->left, path});
        }
    }
}

    vector<vector<int>> pathSum(TreeNode* root, int target) {
        dfs(root);
        vector<vector<int>> fin;
        for(auto i: ans) {
            int sum = 0;
            for(auto j: i)
                sum += j;
            if(target == sum)
                fin.push_back(i);
        }
        return fin;
    }
};
