34. Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Input: nums = [], target = 0
Output: [-1,-1]

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int i=0, j=nums.size()-1, start, end;
        while(i <= j) {
            int mid = i + (j-i) / 2;
            if(nums[mid] == target) {
                for(int k=mid; k<nums.size(); k++)
                    if(nums[k] == target)
                        end = k;
                for(int k=mid; k>=0; k--)
                    if(nums[k] == target)
                        start = k;
                return {start, end};
            }
            else if(nums[mid] > target)
                j = mid - 1;
            else
                i = mid + 1;
        }
        return {-1, -1};
    }
};