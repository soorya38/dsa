Combination Sum III
Difficulty: MediumAccuracy: 74.67%Submissions: 5K+Points: 4
Find all valid combinations of K numbers that sum upto to N such that the following conditions are true:

Only number 1 through 9 are used.
Each number is used atmost once.
Return the list of all possible valid combinations.

Note: The list must not contain the same combination twice, and the combinations returned in any order.
 

Example 1:

Input:
K = 3
N = 7
Output: { {1, 2, 4} }
Explanation: 
1+ 2+ 4 = 7
There are no other valid combinations.
 

Example 2:

Input:
K = 3
N = 9
Output: { {1, 2, 6}, {1, 3, 5}, {2, 3, 4} }
Explanation: 
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
 

Example 3:

Input:
K = 4
N = 3
Output: { { } }
Explanation: There are no valid combinations.
Using 4 different numbers in the range {1, 9}, the smallest sum we can get is 1 + 2 + 3 + 4 = 10 and since 10 > 3, there are no valid combinations.
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function combinationSum() which takes the integers K and N as parameters and returns a list of all possible valid combinations.

Expected Time Complexity: O(2K)
Expected Auxiliary Space: O(K)

Constraints:
1 ≤ K ≤ 9
1 ≤ N  ≤ 60

solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    void combi(vector<vector<int>>& ans, vector<int>& subset, int idx, int k, int n) {
        if (k == 0 && n == 0) {
            ans.push_back(subset);
            return;
        }
    
        for (int i = idx; i <= 9; i++) {
            if (n == 0) break;
            subset.push_back(i);
            combi(ans, subset, i + 1, k - 1, n - i);
            subset.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum(int K, int N) {
        vector<vector<int>> ans;
        vector<int> sub;
        combi(ans, sub, 1, K, N); // start from 1, not 0 because problem states numbers 1-9
        sort(ans.begin(), ans.end());
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> K >> N;

        Solution obj;
        vector<vector<int>> ans = obj.combinationSum(K, N);
        sort(ans.begin(), ans.end());
        for (auto &arr : ans) {
            for (auto it : arr) cout << it << ' ';
            cout << endl;
        }
    }
    return 0;
}
// } Driver Code Ends
