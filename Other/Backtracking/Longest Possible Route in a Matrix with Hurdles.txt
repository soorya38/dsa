Longest Possible Route in a Matrix with Hurdles
Difficulty: MediumAccuracy: 50.0%Submissions: 13K+Points: 4
Given an N x M matrix, with a few hurdles(denoted by 0) arbitrarily placed, calculate the length of the longest possible route possible from source(xs,ys) to a destination(xd,yd) within the matrix. We are allowed to move to only adjacent cells which are not hurdles. The route cannot contain any diagonal moves and a location once visited in a particular path cannot be visited again.If it is impossible to reach the destination from the source return -1.

 

Example 1:

Input:
{xs,ys} = {0,0}
{xd,yd} = {1,7}
matrix = 1 1 1 1 1 1 1 1 1 1
         1 1 0 1 1 0 1 1 0 1
         1 1 1 1 1 1 1 1 1 1
Output: 24
Explanation:

 

Example 2:

Input: 
{xs,ys} = {0,3}
{xd,yd} = {2,2}
matrix = 1 0 0 1 0
         0 0 0 1 0
         0 1 1 0 0
Output: -1
Explanation:
We can see that it is impossible to
reach the cell (2,2) from (0,3).
Your Task:
You don't need to read input or print anything. Your task is to complete the function longestPath() which takes matrix ,source and destination as input parameters and returns an integer denoting the longest path.


Expected Time Complexity: O(2^(N*M))
Expected Auxiliary Space: O(N*M)


Constraints:
1 <= N,M <= 10

solution :

//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Solution {
public:

    int maxLength;  // renamed to avoid conflict with C++ keyword
    int dx, dy;
    
    void func(vector<vector<int>>& nums, int x, int y, vector<vector<int>>& sol, int count) {
        if(x >= nums.size() || y >= nums[0].size() || x < 0 || y < 0 || sol[x][y] == 1 || nums[x][y] == 0)
            return;
            
        if(x == dx && y == dy) {
            if(count > maxLength)
                maxLength = count;
            return;
        }
        
        sol[x][y] = 1;
        func(nums, x+1, y, sol, count + 1); // Down
        func(nums, x, y+1, sol, count + 1); // Right
        func(nums, x-1, y, sol, count + 1); // Up
        func(nums, x, y-1, sol, count + 1); // Left
        sol[x][y] = 0;
    }

    int longestPath(vector<vector<int>> matrix, int xs, int ys, int xd, int yd) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> sol(n, vector<int>(m, 0));
        dx = xd;
        dy = yd;
        maxLength = -1;
        if(matrix[xs][ys] == 0 || matrix[xd][yd] == 0)
            return -1;
        func(matrix, xs, ys, sol, 0);
        return maxLength;
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n, m;
        cin >> n >> m;
        int xs, ys, xd, yd;
        cin >> xs >> ys >> xd >> yd;
        vector<vector<int>> mat(n, vector<int>(m));
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                cin >> mat[i][j];
            }
        }
        Solution ob;
        int ans = ob.longestPath(mat, xs, ys, xd, yd);
        cout << ans;
        cout << "\n";
    }
    return 0;
}
// } Driver Code Ends