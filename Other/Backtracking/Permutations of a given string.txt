Permutations of a given string
Difficulty: MediumAccuracy: 34.65%Submissions: 266K+Points: 4
Given a string S. The task is to print all unique permutations of the given string that may contain dulplicates in lexicographically sorted order. 

Example 1:

Input: ABC
Output:
ABC ACB BAC BCA CAB CBA
Explanation:
Given string ABC has permutations in 6 
forms as ABC, ACB, BAC, BCA, CAB and CBA .
Example 2:

Input: ABSG
Output:
ABGS ABSG AGBS AGSB ASBG ASGB BAGS 
BASG BGAS BGSA BSAG BSGA GABS GASB 
GBAS GBSA GSAB GSBA SABG SAGB SBAG 
SBGA SGAB SGBA
Explanation:
Given string ABSG has 24 permutations.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function find_permutation() which takes the string S as input parameter and returns a vector of string in lexicographical order.

Expected Time Complexity: O(n! * n)
Expected Space Complexity: O(n! * n)

Constraints:
1 <= length of string <= 5

solution :

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	    bool func(string sen, int l, int r, set<string>& ans) {
	        if(l == r) {
	            ans.insert(sen);
	            return false;
	        }
	        
	        for(int i=l; i<=r; i++) {
	            swap(sen[l], sen[i]);
	            if(func(sen, l+1, r, ans))
	                return true;
	            swap(sen[l], sen[i]);
	        }
	        
	        return false;
	    }
	
		vector<string> find_permutation(string S)
		{
		    // Code here there
		    vector<string> ans;
		    set<string> a;
		    if(!func(S, 0, S.size()-1, a))
    		    for(string i: a)
    		        ans.push_back(i);
		    sort(ans.begin(), ans.end());
		    return ans;
		}
};



//{ Driver Code Starts.
int main(){
    int t;
    cin >> t;
    while(t--)
    {
	    string S;
	    cin >> S;
	    Solution ob;
	    vector<string> ans = ob.find_permutation(S);
	    sort(ans.begin(),ans.end());
	    for(auto i: ans)
	    {
	    	cout<<i<<" ";
	    }
	    cout<<"\n";
    }
	return 0;
}

// } Driver Code Ends