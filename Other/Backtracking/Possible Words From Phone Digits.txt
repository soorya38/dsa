Possible Words From Phone Digits
Difficulty: MediumAccuracy: 52.79%Submissions: 61K+Points: 4
Given a keypad as shown in the diagram, and an N digit number which is represented by array a[ ], the task is to list all words which are possible by pressing these numbers.


Example 1:

Input: N = 3, a[] = {2, 3, 4}
Output:
adg adh adi aeg aeh aei afg afh afi 
bdg bdh bdi beg beh bei bfg bfh bfi 
cdg cdh cdi ceg ceh cei cfg cfh cfi 
Explanation: When we press 2,3,4 then 
adg, adh, adi, ... cfi are the list of 
possible words.
Example 2:

Input: N = 3, a[] = {3, 4, 5}
Output:
dgj dgk dgl dhj dhk dhl dij dik dil 
egj egk egl ehj ehk ehl eij eik eil 
fgj fgk fgl fhj fhk fhl fij fik fil
Explanation: When we press 3,4,5 then 
dgj, dgk, dgl, ... fil are the list of 
possible words.
Your Task:
You don't need to read input or print anything. You just need to complete the function possibleWords() that takes an array a[ ] and N as input parameters and returns an array of all the possible words in lexicographical increasing order. 

Expected Time Complexity: O(4N * N).
Expected Auxiliary Space: O(N).

Constraints:
1 ≤ N ≤ 10
2 ≤ a[i] ≤ 9

solution :

//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
#include <string>

using namespace std;


// } Driver Code Ends
//User function Template for C++
    
class Solution
{
    public:
    
    void func(vector<int> nums, int c, vector<string> v, vector<string>& sol) {
        if(c == nums.size()-1) {
            for(int i=0; i<v[nums[c]].size(); i++) {
                string e = "";
                e += v[nums[c]][i];
                sol.push_back(e);
            }
            return ;
        }
        
        func(nums, c+1, v, sol);
        
        int n = sol.size();
        for(int i=0; i<n; i++)
            for(int j=0; j<v[nums[c]].size(); j++)
            {
                string e = "";
                e += v[nums[c]][j];
                sol.push_back(e+sol[i]);
            }
    }
    //Function to find list of all words possible by pressing given numbers.
    vector<string> possibleWords(int a[], int N)
    {
        //Your code here
        vector<string> v = {{}, {}, "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}, sol;
        vector<int> nums;
        for(int i=0; i<N; i++)
            nums.push_back(a[i]);
        vector<string> ans;
        func(nums, 0, v, sol);
        for(string s: sol)
            if(s.size() == nums.size())
                ans.push_back(s);
        sort(ans.begin(), ans.end());
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
  
	int T;
	
	cin >> T; //testcases
	
	while(T--){ //while testcases exist
	   int N;
	    
	   cin >> N; //input size of array
	   
	   int a[N]; //declare the array
	   
	   for(int i =0;i<N;i++){
	       cin >> a[i]; //input the elements of array that are keys to be pressed
	   }
	   
	   Solution obj;
	   
	  vector <string> res = obj.possibleWords(a,N);
	  for (string i : res) cout << i << " ";
	   cout << endl;
	}
	
	return 0;
}
// } Driver Code Ends