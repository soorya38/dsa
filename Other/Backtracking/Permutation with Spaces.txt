Permutation with Spaces
Difficulty: MediumAccuracy: 57.68%Submissions: 30K+Points: 4

Given a string s, you need to print all possible strings that can be made by placing spaces (zero or one) in between them. The output should be printed in sorted increasing order of strings.

Example 1:

Input:
s = "ABC"
Output: (A B C)(A BC)(AB C)(ABC)
Explanation:
ABC
AB C
A BC
A B C
These are the possible combination of "ABC".

Example 2:

Input:
s = "BBR"
Output: (B B R)(B BR)(BB R)(BBR)


Your Task:  
You don't need to read input or print anything. Your task is to complete the function permutation() which takes the string s as input parameters and returns the sorted array of the string denoting the different permutations (DON'T ADD '(' and ')' it will be handled by the driver code only).

Expected Time Complexity: O(2s)
Expected Auxiliary Space: O(1)

 

CONSTRAINTS:
1 <= |s| < 10
s only contains lowercase and Uppercase English letters.

solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:

    void func(string &sen, int c, vector<string> &temp, vector<vector<string>> &sol) {
        if(c == sen.size()) {
            sol.push_back(temp);
            return ;
        }
        
        for(int i=c+1; i<=sen.size(); i++) {
            temp.push_back(string(sen.begin()+c, sen.begin()+i));
            func(sen, i, temp, sol);
            temp.pop_back();
        }
    }

    vector<string> permutation(string s) {
        // Code Here
        vector<vector<string>> sol;
        vector<string> temp, ans;
        func(s, 0, temp, sol);
        for(auto i: sol) {
            string sen = "";
            for(int j=0; j<i.size(); j++) {
                if(j != i.size()-1) {
                    sen += i[j];
                    sen += ' ';
                }
                else {
                    sen += i[j];
                }
            }
            ans.push_back(sen);
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        string S;
        cin >> S;
        vector<string> ans;
        Solution obj;
        ans = obj.permutation(S);
        for (int i = 0; i < ans.size(); i++) {
            cout << "(" << ans[i] << ")";
        }
        cout << endl;
    }
}

// } Driver Code Ends
