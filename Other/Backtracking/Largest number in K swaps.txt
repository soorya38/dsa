Largest number in K swaps
Difficulty: MediumAccuracy: 18.84%Submissions: 96K+Points: 4

Given a number K and string str of digits denoting a positive integer, build the largest number possible by performing swap operations on the digits of str at most K times.


Example 1:

Input:
K = 4
str = "1234567"
Output:
7654321
Explanation:
Three swaps can make the
input 1234567 to 7654321, swapping 1
with 7, 2 with 6 and finally 3 with 5

Example 2:

Input:
K = 3
str = "3435335"
Output:
5543333
Explanation:
Three swaps can make the input
3435335 to 5543333, swapping 3 
with 5, 4 with 5 and finally 3 with 4 


Your task:
You don't have to read input or print anything. Your task is to complete the function findMaximumNum() which takes the string and an integer as input and returns a string containing the largest number formed by perfoming the swap operation at most k times.


Expected Time Complexity: O(n!/(n-k)!) , where n = length of input string
Expected Auxiliary Space: O(n)


Constraints:
1 ≤ |str| ≤ 30
1 ≤ K ≤ 10

solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends


class Solution
{
    public:
    //Function to find the largest number after k swaps.
    string max;
    
    void func(string sen, int k, int c) {
        if(k == 0 || c >= sen.size())
            return ;
        
        char maxNum = sen[c];
        for(int i=c+1; sen[i] != '\0'; i++)
            if(sen[i] > maxNum)
                maxNum = sen[i];
        
        if(maxNum != sen[c])
            k--;
            
        for(int i=sen.size()-1; i>=c; i--) {
            if(sen[i] == maxNum)
            {
                swap(sen[i], sen[c]); 
                if(sen > max)
                    max = sen;
                func(sen, k, c+1);
                swap(sen[i], sen[c]); 
            }
        }
    }
    
    string findMaximumNum(string str, int k)
    {
       // code here.
       func(str, k, 0);
       return max;
    }
};

//{ Driver Code Starts.

int main()
{
    int t, k;
    string str;

    cin >> t;
    while (t--)
    {
        cin >> k >> str;
        Solution ob;
        cout<< ob.findMaximumNum(str, k) << endl;
    }
    return 0;
}

// } Driver Code Ends
