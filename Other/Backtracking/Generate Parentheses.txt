Generate Parentheses
Difficulty: MediumAccuracy: 59.23%Submissions: 37K+Points: 4
Given an integer N representing the number of pairs of parentheses, the task is to generate all combinations of well-formed(balanced) parentheses.


Example 1:

Input:
N = 3
Output:
((()))
(()())
(())()
()(())
()()()
Example 2:
Input:
N = 1
Output:
()

Your Task:  
You don't need to read input or print anything. Complete the function AllParenthesis() which takes N as input parameter and returns the list of balanced parenthesis.

Expected Time Complexity: O(2N * N).
Expected Auxiliary Space: O(2*N*X), X = Number of valid Parenthesis.

Constraints:
1 ≤ N ≤ 12

solution :

//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


// } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    int v;
    void func(vector<char> sen, int o, int c, vector<string>& ans) {
        if(o > v)
            return ;
        if(o == c && o == v) {
            string s = "";
            for(int j=0; j<sen.size(); j++)
                s += sen[j];
            ans.push_back(s);
            return ;
        }
        
        if(o < v) {
            sen.push_back('(');
            func(sen, o+1, c, ans);
            sen.pop_back();
        }
        if(o > c) {
            sen.push_back(')');
            func(sen, o, c+1, ans);
            sen.pop_back();
        }
    }
    
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        v = n;
        vector<string> ans;
        vector<char> sen;
        func(sen, 0, 0, ans);
        return ans;
    }
};

//{ Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 

// } Driver Code Ends