Shortest path from 1 to n
Difficulty: EasyAccuracy: 37.62%Submissions: 82K+Points: 2
Consider a directed graph whose vertices are numbered from 1 to n. There is an edge from a vertex i to a vertex j if and only if either j = i + 1 or j = 3 * i. The task is to find the minimum number of edges in a path from vertex 1 to vertex n.

Example 1:

Input:
n = 9
Output:
2
Explanation:
Many paths are possible from 1 to 9.
Shortest one possible is,
1 -> 3 -> 9, of length 2.
Example 2:

Input:
n = 4
Output:
2
Explanation:
Possible paths from 1 to 4 are,
1 -> 2 -> 3 -> 4 and
1 -> 3 -> 4.
Second path of length 2 is the shortest.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function minimumStep() which takes an integer n as inputs and returns the minimum number of edges in a path from vertex 1 to vertex N.

Expected Time Complexity: O( log(n) )
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 105

solution: 

//{ Driver Code Starts
//Initial template for c++

#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
//User function Template for C++

class Solution{   
public:
    class Graph {
    public:
        map<int, vector<int>> g;
        
        void add(int n, int e) {
            g[n].push_back(e);
        }
        
        int bfs(int s, int dest) {
            queue<pair<int, int>> q;
            set<int> visited;
            
            q.push({s, 0});
            
            while(!q.empty())
            {
                pair<int, int> v = q.front();
                q.pop();
                
                if(visited.find(v.first) != visited.end())
                    continue;
                
                if(v.first == dest)
                    return v.second;
                
                visited.insert(v.first);
                
                for(int i = 0; i < g[v.first].size(); i++) {
                    if(visited.find(g[v.first][i]) == visited.end())
                        q.push({g[v.first][i], v.second + 1});
                }
            }
            return -1; 
        }
    };

    int minimumStep(int n){
        //complete the function here
        int ans = 0;
        //loop until n is greater than 1.
        while(n > 1){
            //if n is divisible by 3, reduce n to one-third its value and increment ans.
            if(n % 3 == 0){
                ans++;
                n /= 3;
            }
            //if n is not divisible by 3, reduce n by 1 and increment ans.
            else{
                n--;
                ans++;
            }
        }
        //return the minimum steps required to reach 1 from n.
        return ans;
    }
};

//{ Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin >> n;
        Solution ob;
        cout << ob.minimumStep(n) << endl;
    
    }
    return 0; 
} 


// } Driver Code Ends