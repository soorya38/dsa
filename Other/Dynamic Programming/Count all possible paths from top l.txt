Count all possible paths from top left to bottom right
Difficulty: EasyAccuracy: 30.82%Submissions: 85K+Points: 2
The task is to count all the possible paths from top left to bottom right of a m X n matrix with the constraints that from each cell you can either move only to right or down.

Example 1:

Input: m = 2, n = 2
Output: 2 
Explanation: Two possible ways are
RD and DR.  

Example 2:

Input: m = 3, n = 3
Output: 6
Explanation: Six possible ways are
RRDD, DDRR, RDDR, DRRD, RDRD, DRDR. 

Your Task:  
You dont need to read input or print anything. Complete the function numberOfPaths() which takes m and n as input parameter and returns count all the possible paths.The answer may be very large, compute the answer modulo 109 + 7.


Expected Time Complexity: O(m*n)
Expected Auxiliary Space: O(m*n)

Constraints:
1 <= m <=100
1 <= n <=100

solution :

//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
    int numberOfPaths(int m, int n) {
        vector<vector<long long>> nums(m, vector<long long>(n, 0));
        for(int i=1; i<m; i++)
            nums[i][0] = 1;
        for(int i=1; i<n; i++)
            nums[0][i] = 1;
        nums[0][0] = 1;
        for(int i=1; i<nums.size(); i++)
            for(int j=1;j <nums[0].size(); j++)
                nums[i][j] = (nums[i-1][j] + nums[i][j-1]) % 1000000007;
        return nums[m-1][n-1];
    }
    
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> m >> n;
        Solution ob;
        cout<<ob.numberOfPaths(m,n)<<endl;
    }
    return 0;
}

// } Driver Code Ends